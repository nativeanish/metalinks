import useBlock from "../../../store/useBlock";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import {
  Trash2,
  ExternalLink,
  Edit3,
  Save,
  X,
  BarChart3,
  Eye,
  Copy,
  Share,
} from "lucide-react";
import { Separator } from "@/components/ui/separator";

interface BlockData {
  id: string;
  name: string;
  alt: string;
  icon: any;
  description: string;
  url?: string;
  title?: string;
  customDescription?: string;
  isEnabled: boolean;
}

function BlockHis() {
  const blocks = useBlock((state) => state.blocks);
  const [blockData, setBlockData] = useState<Record<string, BlockData>>({});
  const [editingBlock, setEditingBlock] = useState<string | null>(null);

  const updateBlockData = (blockId: string, updates: Partial<BlockData>) => {
    setBlockData((prev) => ({
      ...prev,
      [blockId]: {
        ...prev[blockId],
        ...updates,
      },
    }));
  };

  const getBlockData = (block: any): BlockData => {
    const blockId = block.alt || block.name;
    return (
      blockData[blockId] || {
        id: blockId,
        name: block.name,
        alt: block.alt,
        icon: block.icon,
        description: block.description,
        url: "",
        title: "",
        customDescription: "",
        isEnabled: true,
      }
    );
  };

  const saveBlock = (blockId: string) => {
    setEditingBlock(null);
    // Here you could save to a backend or local storage
  };

  const removeBlock = (blockId: string) => {
    setBlockData((prev) => {
      const newData = { ...prev };
      delete newData[blockId];
      return newData;
    });
  };

  const toggleBlock = (blockId: string) => {
    updateBlockData(blockId, {
      isEnabled: !getBlockData({ alt: blockId }).isEnabled,
    });
  };

  if (blocks.length === 0) {
    return (
      <div className="mt-8 text-center py-12">
        <div className="mx-auto w-24 h-24 bg-muted rounded-full flex items-center justify-center mb-4">
          <Edit3 className="h-8 w-8 text-muted-foreground" />
        </div>
        <h3 className="text-lg font-semibold text-foreground mb-2">
          No blocks added yet
        </h3>
        <p className="text-sm text-muted-foreground max-w-sm mx-auto">
          Start building your profile by adding blocks above. Each block
          represents a different way to showcase your content.
        </p>
      </div>
    );
  }

  return (
    <div className="mt-8 space-y-6 mx-auto max-w-2xl">
      <div className="flex items-center justify-between">
        <h2 className="text-xl font-semibold text-foreground">Your Blocks</h2>
        <div className="text-sm text-muted-foreground">
          {blocks.length} block{blocks.length !== 1 ? "s" : ""} added
        </div>
      </div>

      <div className="space-y-4">
        {blocks.map((block, index) => {
          const data = getBlockData(block);
          const isEditing = editingBlock === data.id;

          return (
            <Card
              key={`${data.id}-${index}`}
              className={`transition-all duration-200 ${
                data.isEnabled
                  ? "border-border hover:border-primary/50"
                  : "border-dashed border-muted-foreground/30 opacity-60"
              }`}
            >
              <CardHeader className="pb-3">
                <div className="flex items-center justify-between">
                  <div className="flex items-center gap-3">
                    <div
                      className={`p-2 rounded-lg transition-colors ${
                        data.isEnabled
                          ? "bg-primary/10 text-primary"
                          : "bg-muted text-muted-foreground"
                      }`}
                    >
                      {data.icon && <data.icon className="h-5 w-5" />}
                    </div>
                    <div>
                      <CardTitle className="text-base">{data.name}</CardTitle>
                      <p className="text-xs text-muted-foreground mt-1">
                        {data.description}
                      </p>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    {/* Stats */}
                    <div className="hidden sm:flex items-center gap-4 text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <Eye className="h-3 w-3" />
                        <span>0</span>
                      </div>
                      <div className="flex items-center gap-1">
                        <BarChart3 className="h-3 w-3" />
                        <span>0 clicks</span>
                      </div>
                    </div>

                    <Separator
                      orientation="vertical"
                      className="h-6 hidden sm:block"
                    />

                    {/* Action buttons */}
                    <div className="flex items-center gap-1">
                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8"
                        onClick={() => toggleBlock(data.id)}
                      >
                        <div
                          className={`w-4 h-2 rounded-full transition-colors ${
                            data.isEnabled
                              ? "bg-green-500"
                              : "bg-muted-foreground"
                          }`}
                        />
                      </Button>

                      <Button
                        variant="ghost"
                        size="icon"
                        className="h-8 w-8 text-destructive hover:text-destructive"
                        onClick={() => removeBlock(data.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              </CardHeader>

              <CardContent className="pt-0">
                {isEditing ? (
                  <div className="space-y-4">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label
                          htmlFor={`title-${data.id}`}
                          className="text-sm font-medium"
                        >
                          Display Title
                        </Label>
                        <Input
                          id={`title-${data.id}`}
                          placeholder={`Enter ${data.name} title`}
                          value={data.title}
                          onChange={(e) =>
                            updateBlockData(data.id, { title: e.target.value })
                          }
                          className="bg-muted/40"
                        />
                      </div>

                      <div className="space-y-2">
                        <Label
                          htmlFor={`url-${data.id}`}
                          className="text-sm font-medium"
                        >
                          {data.name === "Email" ? "Email Address" : "URL/Link"}
                        </Label>
                        <Input
                          id={`url-${data.id}`}
                          placeholder={
                            data.name === "Email"
                              ? "your@email.com"
                              : data.name === "Telegram"
                                ? "https://t.me/username"
                                : data.name === "X (Twitter)"
                                  ? "https://x.com/username"
                                  : `Enter ${data.name} URL`
                          }
                          value={data.url}
                          onChange={(e) =>
                            updateBlockData(data.id, { url: e.target.value })
                          }
                          className="bg-muted/40"
                        />
                      </div>
                    </div>

                    <div className="space-y-2">
                      <Label
                        htmlFor={`desc-${data.id}`}
                        className="text-sm font-medium"
                      >
                        Custom Description (Optional)
                      </Label>
                      <Textarea
                        id={`desc-${data.id}`}
                        placeholder="Add a custom description for this block..."
                        value={data.customDescription}
                        onChange={(e) =>
                          updateBlockData(data.id, {
                            customDescription: e.target.value,
                          })
                        }
                        className="min-h-20 bg-muted/40"
                      />
                    </div>

                    <div className="flex justify-end gap-2 pt-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setEditingBlock(null)}
                      >
                        Cancel
                      </Button>
                      <Button
                        size="sm"
                        onClick={() => saveBlock(data.id)}
                        className="bg-primary hover:bg-primary/90"
                      >
                        <Save className="h-4 w-4 mr-2" />
                        Save Changes
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-3">
                    {/* URL Display */}
                    <div className="flex items-center gap-2 p-3 bg-muted/30 rounded-lg">
                      <div className="flex-1 min-w-0">
                        {data.url ? (
                          <div className="flex items-center gap-2">
                            <span className="text-sm text-muted-foreground truncate">
                              {data.url}
                            </span>
                            <Button
                              variant="ghost"
                              size="icon"
                              className="h-6 w-6 shrink-0"
                              onClick={() =>
                                navigator.clipboard.writeText(data.url || "")
                              }
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          </div>
                        ) : (
                          <span className="text-sm text-muted-foreground italic">
                            No URL configured
                          </span>
                        )}
                      </div>

                      {data.url && (
                        <Button
                          variant="ghost"
                          size="icon"
                          className="h-6 w-6 shrink-0"
                          onClick={() => window.open(data.url, "_blank")}
                        >
                          <ExternalLink className="h-3 w-3" />
                        </Button>
                      )}
                    </div>

                    {/* Custom title and description */}
                    {(data.title || data.customDescription) && (
                      <div className="space-y-2">
                        {data.title && (
                          <div>
                            <span className="text-xs text-muted-foreground">
                              Title:
                            </span>
                            <p className="text-sm font-medium">{data.title}</p>
                          </div>
                        )}
                        {data.customDescription && (
                          <div>
                            <span className="text-xs text-muted-foreground">
                              Description:
                            </span>
                            <p className="text-sm text-foreground">
                              {data.customDescription}
                            </p>
                          </div>
                        )}
                      </div>
                    )}

                    {/* Action buttons */}
                    <div className="flex items-center justify-between pt-2">
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => setEditingBlock(data.id)}
                        >
                          <Edit3 className="h-4 w-4 mr-2" />
                          Edit
                        </Button>

                        {data.url && (
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => {
                              const shareData = {
                                title: data.title || data.name,
                                url: data.url,
                              };
                              if (navigator.share) {
                                navigator.share(shareData);
                              } else {
                                navigator.clipboard.writeText(data.url || "");
                              }
                            }}
                          >
                            <Share className="h-4 w-4 mr-2" />
                            Share
                          </Button>
                        )}
                      </div>

                      <div className="flex items-center gap-2">
                        <span
                          className={`text-xs px-2 py-1 rounded-full ${
                            data.isEnabled
                              ? "bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-400"
                              : "bg-muted text-muted-foreground"
                          }`}
                        >
                          {data.isEnabled ? "Active" : "Disabled"}
                        </span>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          );
        })}
      </div>

      {/* Summary footer */}
      <div className="mt-8 p-4 bg-muted/30 rounded-lg">
        <div className="flex items-center justify-between text-sm">
          <div className="flex items-center gap-4">
            <span className="text-muted-foreground">
              Total blocks:{" "}
              <span className="font-medium text-foreground">
                {blocks.length}
              </span>
            </span>
            <span className="text-muted-foreground">
              Active:{" "}
              <span className="font-medium text-green-600">
                {Object.values(blockData).filter((b) => b.isEnabled).length}
              </span>
            </span>
          </div>

          <div className="flex items-center gap-2">
            <Button size="sm" className="bg-primary hover:bg-primary/90">
              <Save className="h-4 w-4 mr-2" />
              Publish
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default BlockHis;
